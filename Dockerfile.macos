ARG           FROM_REGISTRY=ghcr.io/dubo-dubon-duponey

ARG           FROM_IMAGE_BUILDER=base:builder-bullseye-2021-10-01@sha256:8500836fc43374bdb9831ac0d76d70054987aa210ac6c3f2caff0ddd8ac53b90
ARG           FROM_IMAGE_AUDITOR=base:auditor-bullseye-2021-10-01@sha256:af728eaf5271cae6a948f5c4d34a43b4cff5dae16cc3e5dabf99a0aeea7986a9
ARG           FROM_IMAGE_RUNTIME=scratch

FROM          $FROM_REGISTRY/$FROM_IMAGE_BUILDER                                                                        AS osx-cross

ARG           GIT_REPO=github.com/tpoechtrager/osxcross
ARG           GIT_VERSION=26ebac2
ARG           GIT_COMMIT=26ebac26899650b12b99de86ebbde785de6ca173

WORKDIR       /tools/osxcross
RUN           git clone --recurse-submodules git://"$GIT_REPO" . && git checkout "$GIT_COMMIT"


FROM          osx-cross                                                                                                 AS builder-sdk

RUN           --mount=type=bind,target=/SDKs \
              ln -s /SDKs ./Packages; \
              XCODEDIR=. ./tools/gen_sdk_package.sh

RUN           mkdir /dist; mv MacOSX* /dist

FROM          scratch                                                                                                   AS sdk

COPY          --from=builder-sdk /dist /cache

#######################
# A cross compiling toolchain meant for CGO macOS binaries
#######################
FROM          osx-cross                                                                                                 AS builder-cross

RUN           --mount=type=secret,uid=100,id=CA \
              --mount=type=secret,uid=100,id=CERTIFICATE \
              --mount=type=secret,uid=100,id=KEY \
              --mount=type=secret,uid=100,id=GPG.gpg \
              --mount=type=secret,id=NETRC \
              --mount=type=secret,id=APT_SOURCES \
              --mount=type=secret,id=APT_CONFIG \
              apt-get update -qq && apt-get install -qq --no-install-recommends \
                lzma-dev=9.22-2.2 \
                libxml2-dev=2.9.10+dfsg-6.7 \
                cmake=3.18.4-2 \
                patch=2.7.6-7 \
                libssl-dev=1.1.1k-1+deb11u1 \
                clang=1:11.0-51+nmu5 \
                lld=1:11.0-51+nmu5 \
                python3=3.9.2-3 && \
              rm -rf /var/lib/apt/lists/*

# Unsupported by clang: -mcet -fstack-clash-protection
ENV           WARNING_OPTIONS="-Werror=implicit-function-declaration -Werror=format-security -Wall"
ENV           OPTIMIZATION_OPTIONS="-O3"
ENV           DEBUGGING_OPTIONS="-grecord-gcc-switches -g"
ENV           PREPROCESSOR_OPTIONS="-Wp,-D_GLIBCXX_ASSERTION -D_FORTIFY_SOURCE=2"
ENV           COMPILER_OPTIONS="-pipe -fexceptions -fstack-protector-strong -fcf-protection"
# -Wl,-z,relro -Wl,-z,now -Wl,-z,defs -Wl,-z,noexecstack"
# It seems like ld for mac does not support these
ENV           LDFLAGS=""
ENV           CFLAGS="$WARNING_OPTIONS $OPTIMIZATION_OPTIONS $DEBUGGING_OPTIONS $PREPROCESSOR_OPTIONS $COMPILER_OPTIONS"
ENV           CXXFLAGS="$CFLAGS"

# hadolint ignore=DL3010
COPY          ./cache/MacOSX*.sdk.tar.xz ./tarballs
RUN           UNATTENDED=1 ./build.sh

WORKDIR       /source
ENV           CC="o64-clang"
ENV           CXX="o64-clang++"
ENV           PATH="/tools/osxcross/target/bin:$PATH"
ENV           MACOSX_DEPLOYMENT_TARGET=10.11
ONBUILD ARG   GOPROXY="https://proxy.golang.org,direct"

##########################################################################################################################################
# Fetchers
##########################################################################################################################################

#######################
# Fetcher: buildctl
#######################
FROM          --platform=$BUILDPLATFORM builder-cross                                                                   AS fetcher-buildctl

ARG           GIT_REPO=github.com/moby/buildkit
ARG           GIT_VERSION=v0.9.0
ARG           GIT_COMMIT=c8bb937807d405d92be91f06ce2629e6202ac7a9

ENV           WITH_BUILD_SOURCE="./cmd/buildctl"
ENV           WITH_BUILD_OUTPUT="buildctl"

ENV           CGO_ENABLED=1
#ENV           ENABLE_STATIC=true
ENV           ENABLE_PIE=true
ENV           WITH_CGO_NET=true
ENV           WITH_LDFLAGS="-X $GIT_REPO/version.Version=$GIT_VERSION -X $GIT_REPO/version.Revision=$GIT_COMMIT -X $GIT_REPO/version.Package=$GIT_REPO"

RUN           git clone --recurse-submodules git://"$GIT_REPO" .; git checkout "$GIT_COMMIT"
RUN           --mount=type=secret,id=CA \
              --mount=type=secret,id=NETRC \
              [[ "${GOFLAGS:-}" == *-mod=vendor* ]] || go mod download

#######################
# Fetcher: cuelang
#######################
FROM          --platform=$BUILDPLATFORM builder-cross                                                                   AS fetcher-cuelang

ARG           GIT_REPO=github.com/cuelang/cue
ARG           GIT_VERSION=v0.4.0
ARG           GIT_COMMIT=3b0a537a2db6d49d1ae67631a31c45ad97c69078

ENV           WITH_BUILD_SOURCE="./cmd/cue"
ENV           WITH_BUILD_OUTPUT="cue"

ENV           CGO_ENABLED=1
#ENV           ENABLE_STATIC=true
ENV           ENABLE_PIE=true
ENV           WITH_CGO_NET=true
ENV           WITH_LDFLAGS="-X cuelang.org/go/cmd/cue/cmd.version=$GIT_VERSION"

RUN           git clone --recurse-submodules git://"$GIT_REPO" .; git checkout "$GIT_COMMIT"
RUN           --mount=type=secret,id=CA \
              --mount=type=secret,id=NETRC \
              [[ "${GOFLAGS:-}" == *-mod=vendor* ]] || go mod download

#######################
# Fetcher: dagger
#######################
FROM          --platform=$BUILDPLATFORM builder-cross                                                                   AS fetcher-dagger

ARG           GIT_REPO=github.com/dagger/dagger
ARG           GIT_VERSION=v0.1.0-alpha12
ARG           GIT_COMMIT=b805d37cb0c6314d330a389134b37e554485b42b

ENV           WITH_BUILD_SOURCE="./cmd/dagger"
ENV           WITH_BUILD_OUTPUT="dagger"

ENV           CGO_ENABLED=1
#ENV           ENABLE_STATIC=true
ENV           ENABLE_PIE=true
ENV           WITH_CGO_NET=true

RUN           git clone --recurse-submodules git://"$GIT_REPO" .; git checkout "$GIT_COMMIT"
RUN           --mount=type=secret,id=CA \
              --mount=type=secret,id=NETRC \
              [[ "${GOFLAGS:-}" == *-mod=vendor* ]] || go mod download

#######################
# Fetcher: docker cli
#######################
FROM          --platform=$BUILDPLATFORM builder-cross                                                                   AS fetcher-docker-cli

ARG           GIT_REPO=github.com/docker/cli
ARG           GIT_VERSION=v20.10.8
ARG           GIT_COMMIT=3967b7d28e15a020e4ee344283128ead633b3e0c

ENV           WITH_BUILD_SOURCE="./cmd/docker"
ENV           WITH_BUILD_OUTPUT="docker"

ENV           CGO_ENABLED=1
#ENV           ENABLE_STATIC=true
ENV           ENABLE_PIE=true
ENV           WITH_CGO_NET=true

ENV           WITH_LDFLAGS="-X $GIT_REPO/cli/version.Version=$GIT_VERSION -X $GIT_REPO/cli/version.GitCommit=$GIT_COMMIT"
ENV           WITH_TAGS="pkcs11"

# These extra two serve little to no purpose IMHO
# /cli/version.PlatformName=${PLATFORM}\""
# /cli/version.BuildTime=${BUILDTIME}\" \

# XXX Docker PITA
# cli is still not a go module, and uses vendoring
# XXX with mod=vendor, is this still necessary?
ENV           GOFLAGS="-mod=vendor"
ENV           GO111MODULE=off
WORKDIR       $GOPATH/src/$GIT_REPO
# XXX Docker PITA

RUN           git clone --recurse-submodules git://"$GIT_REPO" .; git checkout "$GIT_COMMIT"
RUN           --mount=type=secret,id=CA \
              --mount=type=secret,id=NETRC \
              [[ "${GOFLAGS:-}" == *-mod=vendor* ]] || go mod download

#######################
# Fetcher: terraform
#######################
FROM          --platform=$BUILDPLATFORM builder-cross                                                                   AS fetcher-terraform

ARG           GIT_REPO=github.com/hashicorp/terraform
ARG           GIT_VERSION=v1.0.5
ARG           GIT_COMMIT=1fc7ee138bb9f234d8bae275e7d3b8dae2fc5a4c

ENV           WITH_BUILD_SOURCE="./"
ENV           WITH_BUILD_OUTPUT="terraform"

ENV           CGO_ENABLED=1
#ENV           ENABLE_STATIC=true
ENV           ENABLE_PIE=true
ENV           WITH_CGO_NET=true

RUN           git clone --recurse-submodules git://"$GIT_REPO" .; git checkout "$GIT_COMMIT"

# XXX https://github.com/hashicorp/terraform/issues/29021
RUN           echo "replace github.com/tencentcloud/tencentcloud-sdk-go v3.0.82+incompatible => github.com/tencentcloud/tencentcloud-sdk-go v1.0.191" >> go.mod

RUN           --mount=type=secret,id=CA \
              --mount=type=secret,id=NETRC \
              go mod tidy

RUN           --mount=type=secret,id=CA \
              --mount=type=secret,id=NETRC \
              [[ "${GOFLAGS:-}" == *-mod=vendor* ]] || go mod download

#######################
# Fetcher: goello
#######################
FROM          --platform=$BUILDPLATFORM builder-cross                                                                   AS fetcher-goello

ARG           GIT_REPO=github.com/dubo-dubon-duponey/goello
ARG           GIT_VERSION=645d737
ARG           GIT_COMMIT=645d737d6f299eca959dc2feb413f7c5fbcd8ce9

# This one has many targets, so, let downstream decide
ENV           ENABLE_PIE=true
ENV           WITH_BUILD_SOURCE="you_must_pick_what_you_want_to_build"
ENV           WITH_BUILD_OUTPUT="you_must_pick_what_you_want_to_build"

RUN           git clone --recurse-submodules git://"$GIT_REPO" .; git checkout "$GIT_COMMIT"
RUN           --mount=type=secret,id=CA \
              --mount=type=secret,id=NETRC \
              [[ "${GOFLAGS:-}" == *-mod=vendor* ]] || go mod download

#######################
# Fetcher: caddy
#######################
FROM          --platform=$BUILDPLATFORM builder-cross                                                                   AS fetcher-caddy

ARG           GIT_REPO=github.com/caddyserver/caddy
ARG           GIT_VERSION=v2.4.3
ARG           GIT_COMMIT=9d4ed3a3236df06e54c80c4f6633b66d68ad3673

ENV           ENABLE_PIE=true
ENV           WITH_BUILD_SOURCE="./cmd/caddy"
ENV           WITH_BUILD_OUTPUT="caddy"

RUN           git clone --recurse-submodules git://"$GIT_REPO" .; git checkout "$GIT_COMMIT"
RUN           --mount=type=secret,id=CA \
              --mount=type=secret,id=NETRC \
              [[ "${GOFLAGS:-}" == *-mod=vendor* ]] || go mod download

###################################################################
# Buildctl
###################################################################
FROM          fetcher-buildctl                                                                                          AS builder-buildctl

ENV           GOOS="darwin"
ENV           GOARCH="amd64"

ENV           CGO_CFLAGS="${CFLAGS:-} ${ENABLE_PIE:+-fPIE}"
ENV           GOFLAGS="-trimpath ${ENABLE_PIE:+-buildmode=pie} ${GOFLAGS:-}"

RUN           [ "${CGO_ENABLED:-}" != 1 ] || { \
                WITH_LDFLAGS="${WITH_LDFLAGS:-} -linkmode=external -extld="$CC" -extldflags \"${LDFLAGS:-} ${ENABLE_STATIC:+-static}${ENABLE_PIE:+-pie}\""; \
                WITH_TAGS="${WITH_TAGS:-} cgo ${ENABLE_STATIC:+static static_build}"; \
              }; \
              go build -ldflags "-s -w -v ${WITH_LDFLAGS:-}" -tags "${WITH_TAGS:-} net${WITH_CGO_NET:+c}go osusergo" -o /dist/boot/bin/"$WITH_BUILD_OUTPUT" "$WITH_BUILD_SOURCE"

###################################################################
# Docker cli
###################################################################
FROM          fetcher-docker-cli                                                                                        AS builder-docker

ENV           GOOS="darwin"
ENV           GOARCH="amd64"

ENV           CGO_CFLAGS="${CFLAGS:-} ${ENABLE_PIE:+-fPIE}"
ENV           GOFLAGS="-trimpath ${ENABLE_PIE:+-buildmode=pie} ${GOFLAGS:-}"

RUN           [ "${CGO_ENABLED:-}" != 1 ] || { \
                WITH_LDFLAGS="${WITH_LDFLAGS:-} -linkmode=external -extld="$CC" -extldflags \"${LDFLAGS:-} ${ENABLE_STATIC:+-static}${ENABLE_PIE:+-pie}\""; \
                WITH_TAGS="${WITH_TAGS:-} cgo ${ENABLE_STATIC:+static static_build}"; \
              }; \
              go build -ldflags "-s -w -v ${WITH_LDFLAGS:-}" -tags "${WITH_TAGS:-} net${WITH_CGO_NET:+c}go osusergo" -o /dist/boot/bin/"$WITH_BUILD_OUTPUT" "$WITH_BUILD_SOURCE"

###################################################################
# Terraform
###################################################################
FROM          fetcher-terraform                                                                                         AS builder-terraform

ENV           GOOS="darwin"
ENV           GOARCH="amd64"

ENV           CGO_CFLAGS="${CFLAGS:-} ${ENABLE_PIE:+-fPIE}"
ENV           GOFLAGS="-trimpath ${ENABLE_PIE:+-buildmode=pie} ${GOFLAGS:-}"

RUN           [ "${CGO_ENABLED:-}" != 1 ] || { \
                WITH_LDFLAGS="${WITH_LDFLAGS:-} -linkmode=external -extld="$CC" -extldflags \"${LDFLAGS:-} ${ENABLE_STATIC:+-static}${ENABLE_PIE:+-pie}\""; \
                WITH_TAGS="${WITH_TAGS:-} cgo ${ENABLE_STATIC:+static static_build}"; \
              }; \
              go build -ldflags "-s -w -v ${WITH_LDFLAGS:-}" -tags "${WITH_TAGS:-} net${WITH_CGO_NET:+c}go osusergo" -o /dist/boot/bin/"$WITH_BUILD_OUTPUT" "$WITH_BUILD_SOURCE"

###################################################################
# Buildctl
###################################################################
FROM          fetcher-dagger                                                                                            AS builder-dagger

ENV           GOOS="darwin"
ENV           GOARCH="amd64"

ENV           CGO_CFLAGS="${CFLAGS:-} ${ENABLE_PIE:+-fPIE}"
ENV           GOFLAGS="-trimpath ${ENABLE_PIE:+-buildmode=pie} ${GOFLAGS:-}"

RUN           [ "${CGO_ENABLED:-}" != 1 ] || { \
                WITH_LDFLAGS="${WITH_LDFLAGS:-} -linkmode=external -extld="$CC" -extldflags \"${LDFLAGS:-} ${ENABLE_STATIC:+-static}${ENABLE_PIE:+-pie}\""; \
                WITH_TAGS="${WITH_TAGS:-} cgo ${ENABLE_STATIC:+static static_build}"; \
              }; \
              go build -ldflags "-s -w -v ${WITH_LDFLAGS:-}" -tags "${WITH_TAGS:-} net${WITH_CGO_NET:+c}go osusergo" -o /dist/boot/bin/"$WITH_BUILD_OUTPUT" "$WITH_BUILD_SOURCE"

###################################################################
# Buildctl
###################################################################
FROM          fetcher-cuelang                                                                                           AS builder-cuelang

ENV           GOOS="darwin"
ENV           GOARCH="amd64"

ENV           CGO_CFLAGS="${CFLAGS:-} ${ENABLE_PIE:+-fPIE}"
ENV           GOFLAGS="-trimpath ${ENABLE_PIE:+-buildmode=pie} ${GOFLAGS:-}"

RUN           [ "${CGO_ENABLED:-}" != 1 ] || { \
                WITH_LDFLAGS="${WITH_LDFLAGS:-} -linkmode=external -extld="$CC" -extldflags \"${LDFLAGS:-} ${ENABLE_STATIC:+-static}${ENABLE_PIE:+-pie}\""; \
                WITH_TAGS="${WITH_TAGS:-} cgo ${ENABLE_STATIC:+static static_build}"; \
              }; \
              go build -ldflags "-s -w -v ${WITH_LDFLAGS:-}" -tags "${WITH_TAGS:-} net${WITH_CGO_NET:+c}go osusergo" -o /dist/boot/bin/"$WITH_BUILD_OUTPUT" "$WITH_BUILD_SOURCE"

#######################
# Goello
#######################
FROM          fetcher-goello                                                                                            AS builder-goello-client

ENV           WITH_BUILD_SOURCE=./cmd/client
ENV           WITH_BUILD_OUTPUT=goello-client

ENV           GOOS="darwin"
ENV           GOARCH="amd64"

ENV           CGO_CFLAGS="${CFLAGS:-} ${ENABLE_PIE:+-fPIE}"
ENV           GOFLAGS="-trimpath ${ENABLE_PIE:+-buildmode=pie} ${GOFLAGS:-}"

RUN           [ "${CGO_ENABLED:-}" != 1 ] || { \
                WITH_LDFLAGS="${WITH_LDFLAGS:-} -linkmode=external -extld="$CC" -extldflags \"${LDFLAGS:-} ${ENABLE_STATIC:+-static}${ENABLE_PIE:+-pie}\""; \
                WITH_TAGS="${WITH_TAGS:-} cgo ${ENABLE_STATIC:+static static_build}"; \
              }; \
              go build -ldflags "-s -w -v ${WITH_LDFLAGS:-}" -tags "${WITH_TAGS:-} net${WITH_CGO_NET:+c}go osusergo" -o /dist/boot/bin/"$WITH_BUILD_OUTPUT" "$WITH_BUILD_SOURCE"

#######################
# Goello
#######################
FROM          fetcher-goello                                                                                            AS builder-goello-server

ENV           WITH_BUILD_SOURCE=./cmd/server
ENV           WITH_BUILD_OUTPUT=goello-server

ENV           GOOS="darwin"
ENV           GOARCH="amd64"

ENV           CGO_CFLAGS="${CFLAGS:-} ${ENABLE_PIE:+-fPIE}"
ENV           GOFLAGS="-trimpath ${ENABLE_PIE:+-buildmode=pie} ${GOFLAGS:-}"

RUN           [ "${CGO_ENABLED:-}" != 1 ] || { \
                WITH_LDFLAGS="${WITH_LDFLAGS:-} -linkmode=external -extld="$CC" -extldflags \"${LDFLAGS:-} ${ENABLE_STATIC:+-static}${ENABLE_PIE:+-pie}\""; \
                WITH_TAGS="${WITH_TAGS:-} cgo ${ENABLE_STATIC:+static static_build}"; \
              }; \
              go build -ldflags "-s -w -v ${WITH_LDFLAGS:-}" -tags "${WITH_TAGS:-} net${WITH_CGO_NET:+c}go osusergo" -o /dist/boot/bin/"$WITH_BUILD_OUTPUT" "$WITH_BUILD_SOURCE"

#######################
# Caddy
#######################
FROM          fetcher-caddy                                                                                             AS builder-caddy

ENV           GOOS="darwin"
ENV           GOARCH="amd64"

ENV           CGO_CFLAGS="${CFLAGS:-} ${ENABLE_PIE:+-fPIE}"
ENV           GOFLAGS="-trimpath ${ENABLE_PIE:+-buildmode=pie} ${GOFLAGS:-}"

RUN           [ "${CGO_ENABLED:-}" != 1 ] || { \
                WITH_LDFLAGS="${WITH_LDFLAGS:-} -linkmode=external -extld="$CC" -extldflags \"${LDFLAGS:-} ${ENABLE_STATIC:+-static}${ENABLE_PIE:+-pie}\""; \
                WITH_TAGS="${WITH_TAGS:-} cgo ${ENABLE_STATIC:+static static_build}"; \
              }; \
              go build -ldflags "-s -w -v ${WITH_LDFLAGS:-}" -tags "${WITH_TAGS:-} net${WITH_CGO_NET:+c}go osusergo" -o /dist/boot/bin/"$WITH_BUILD_OUTPUT" "$WITH_BUILD_SOURCE"

#######################
# Builder assembly
#######################
FROM          --platform=$BUILDPLATFORM $FROM_REGISTRY/$FROM_IMAGE_AUDITOR                                              AS builder

COPY          --from=builder-goello-client /dist/boot/bin /dist/boot/bin
COPY          --from=builder-goello-server /dist/boot/bin /dist/boot/bin
COPY          --from=builder-caddy /dist/boot/bin /dist/boot/bin
COPY          --from=builder-buildctl /dist/boot/bin /dist/boot/bin
COPY          --from=builder-cuelang /dist/boot/bin /dist/boot/bin
COPY          --from=builder-docker /dist/boot/bin /dist/boot/bin
COPY          --from=builder-terraform /dist/boot/bin /dist/boot/bin
# Private for now
#COPY          --from=builder-dagger /dist/boot/bin /dist/boot/bin

RUN           chmod 555 /dist/boot/bin/*; \
              epoch="$(date --date "$BUILD_CREATED" +%s)"; \
              find /dist/boot -newermt "@$epoch" -exec touch --no-dereference --date="@$epoch" '{}' +;

#######################
# Running image
#######################
FROM          $FROM_IMAGE_RUNTIME

COPY          --from=builder --chown=$BUILD_UID:root /dist /

ARG           BUILD_CREATED="1976-04-14T17:00:00-07:00"
ARG           BUILD_URL="https://github.com/dubo-dubon-duponey/docker-debian"
ARG           BUILD_DOCUMENTATION="https://github.com/dubo-dubon-duponey/docker-debian"
ARG           BUILD_SOURCE="https://github.com/dubo-dubon-duponey/docker-debian"
ARG           BUILD_VERSION="unknown"
ARG           BUILD_REVISION="unknown"
ARG           BUILD_VENDOR="dubodubonduponey"
ARG           BUILD_LICENSES="MIT"
ARG           BUILD_REF_NAME="latest"
ARG           BUILD_TITLE="A DBDBDP image"
ARG           BUILD_DESCRIPTION="So image. Much DBDBDP. Such description."

LABEL         org.opencontainers.image.created="$BUILD_CREATED"
LABEL         org.opencontainers.image.authors="Dubo Dubon Duponey <dubo-dubon-duponey@farcloser.world>"
LABEL         org.opencontainers.image.url="$BUILD_URL"
LABEL         org.opencontainers.image.documentation="$BUILD_DOCUMENTATION"
LABEL         org.opencontainers.image.source="$BUILD_SOURCE"
LABEL         org.opencontainers.image.version="$BUILD_VERSION"
LABEL         org.opencontainers.image.revision="$BUILD_REVISION"
LABEL         org.opencontainers.image.vendor="$BUILD_VENDOR"
LABEL         org.opencontainers.image.licenses="$BUILD_LICENSES"
LABEL         org.opencontainers.image.ref.name="$BUILD_REF_NAME"
LABEL         org.opencontainers.image.title="$BUILD_TITLE"
LABEL         org.opencontainers.image.description="$BUILD_DESCRIPTION"
